{
    "patterns": [
        {
            "name": "entity.name.function.instructions", 
            "match": "\\b(?i:aa[adms]|adc[bwlq]?|x?add[bwlq]?|and[bwlq]?|arpl|bound[wl]?|bs[fr][wlq]?|bswap[lq]?|bt[crs]?[wlq]?|call[wlq]?|clc|cld|cli|cltd[dqw]?|clts|cmc|cmov(n?[abgl]e?|n?[ceosz]|np|p[eo]?)?[lqw]?|cmp[bwlq]?|cmps[bwdq]?|cmpxchg[bwlq]?|cmpxchg(8|16)b|cpuid|c[lw]td[bwlq]?|daa|das|dec[bwlq]?|div[bwlq]?|enter|esc|hlt|idiv[bwlq]?|imul[bwlq]?|in[bwlq]?|inc[bwlq]?|insd?[bwlq]?|int(\\s*3|o)?|inv(d|pcid)?|invlpg|iret[dfq]?|j(n?[abgl]e?|n?[ceosz]|np|p[eo]?)|jmp|j[er]?cxz|[ls]ahf|lar|lcall|l[de]s|lea[bwlq]?|leave|l[defgs]s|[ls][gil]dt|ljmp|lmsw|loadall|lods[bwdq]?|loop(n?[ez][dw]?)?|lret|lsl|ltr|mov((s?(b[lwq]?|w[lq]?|lq?|q)?)|(z?(b[lwq]|w[lq]|l|q)))?|movd|movs(x?d|w)|mov[sz]x|mul[bwlq]?|neg[bwlq]?|nop|not[bwlq]?|x?or[bwlq]?|out[bwlq]?|outs[bdw]?|pop[bwlq]?|popal?|pop[af]d|popf[lq]?|push[bwlq]?|pushal?|push[af]d|pushf[lq]?|rc[lr][bwlq]?|(rd|wr)msr|rdtscp?|retf?|ro[lr][bwlq]?|rsm|sa[lr][bwlq]?|sbb[bwlq]?|scas[bdqw]?|set(n?[abgl]e?|n?[ceosz]|np|p[eo]?)|sh[lr]d?[bwlq]?|smsw|stc|std|sti|stos[bdqw]?|str|sub[bwlq]?|swapgs|syscall|sysret|sysenter|sysexit|test[bwlq]?|ud2|ver[rw]|fwait|wbinvd|xchg[bwlq]?|x[gs]etbv|xlatb?|xsave[cs]?(64)?|xrstors?(64)?)\\b",
            "comment" : "I may organize these later based on processor additions."
        }, 
        {  "name": "entity.name.function.conversion.instructions",
           "match": "\\b(?i:cbw|cdqe?|cwde?|cdo|cqo|cbtw|cwt[ld]|clt[dq]|cqto)\\b",
           "comment": "Data type conversions. Apparently the Intel ones work too. I tried it."
        },
        {  "name": "keyword.name.function.prefixes",
           "match": "\\b(?i:rep(n?[ez])?|[c-gs]s|(addr|data)(16|32)|lock|wait|rex(64xyz)?)\\b",
           "comment": "Not really instructions."
        },
        {  "name": "entity.name.function.mmx_instructions",
           "match": "\\b(?i:emms|mov[dq]|pack(ssdw|[us]swb)|padd([bdw]|u?s[bw])|pandn?|pcmp(eq|gt)[bdw]|pmaddwd|pmul[hl]w|psll[dqw]|psr(a[dw]|l[dqw])|psub([bdw]|u?s[bw])|punpck[hl](bw|dq|wd)|px?or|rdpmc)\\b",
           "comment": "cpuid | grep -i mmx"
        },
        {  "name": "entity.name.function.sse",
           "match": "\\b(?i:maskmovq|movntps|movntq|prefetcht[012]|prefetchnta|sfence)\\b",
           "comment": "cpuid | grep -i 'sse ext'"
        },
        {  "name": "entity.name.function.sse_simd",
           "match": "\\b(?i:add[sp]s|cmp[ps]s|u?comiss|cvt(p(i2ps|s2pi)|s(i2ss|s2si)|t(ps2pi|ss2si))|div[ps]s|ldmxcsr|(max|min)[ps]s|mov(a|hl?|lh?|msk|nt)ps|v?mov(s|up)s|mul[ps]s|rcp[ps]s|r?sqrt[ps]s|shufps|stmxcsr|sub[ps]s|unpck[hl]ps|andn?ps|x?orps|pavg[bw]|pextrw|pminsrw|p(max|min)(sw|ub)|pmovmskb|pmulhuw|psadbw|pshufw)\\b",
           "comment": "cpuid | grep -i 'sse ext'"
        },
        {  "name": "entity.name.function.sse2",
           "match": "\\b(?i:clflush|[lm]fence|maskmovdqu|v?movnt(dq|i|pd)|pause)\\b",
           "comment": "cpuid | grep -i 'sse2'"
        },
        {  "name": "entity.name.function.sse2_simd",
           "match": "\\b(?i:v?add[ps][ds]|andn?pd|bzhi[wl]?|cmp[ps]d|u?comisd|cvtdq2p[ds]|cvtt?pd2(dq|pi)|cvtpd2ps|cvtp[is]2pd|cvtt?ps2dq|cvtt?sd2s[is]|cvts[is]2sd|div[ps][ds]|v?(max|min)[ps][ds]|v?mov[ahlu]pd|v?movmskpd|v?mul[ps]d|x?orpd|shufpd|sqrt[ps]d|sub[ps]d|unpck[hl]pd|unpcklpd|movdq(2q|[au])|movq2dq|paddq|psubq|pmuludq|pshuf([hl]w|d)|ps[lr]ldq|punpck[hl]qdq)\\b",
           "comment": "cpuid | grep -i 'sse2'"
        },
        {  "name": "entity.name.function.sse3",
           "match": "\\b(?i:lddqu|monitor|mwait)\\b",
           "comment" : "cpuid | grep -i 'pni/sse3'"
        },
        {  "name": "entity.name.function.xsse3_simd",
           "match": "\\b(?i:addsubp[ds]|haddp[ds]|hsubp[ds]|v?mov(d|s[hl])dup|psign[bdw]|pshufb|pmulhrsw|pmaddubsw|phsub(s?w|d)|phadd(s?w|d)|palignr|pabs[bdw])\\b",
           "comment" : "cpuid | grep -i 'ssse3'"
        },
        {  "name": "entity.name.function.sse4_simd",
           "match": "\\b(?i:v?mpsadbw|phminposuw|pmul(ld|dq)|dpp[ds]|blendv?p[ds]|pblendvb|pblendw|p(max|min)(s[bd]|u[wd])|roundp[ds]|rounds[ds]|insertps|pinsr[bwdq]|extractps|pextr[bdq]|pmov[sz]xb[dwq]|pmov[sz]xw[dq]|pmov[sz]xdq|pmov[sz]x|ptest|pcmpeqq|packusdw|v?movntdqa|lzcnt|popcnt|extrq|insertq|movnts[ds]|crc32|pcmp[ei]str[im]|pcmpgtq)\\b",
           "comment" : "cpuid | grep -i 'sse4'"
           // I combined sse4.1 and 2 instructions here. Don't kill me.
        },
        {  "name": "entity.name.function.fpu_x87",
           "match": "\\b(?i:f(2xm1|abs|addp?|bld|b?stp|chs|n?clex|u?comp{0,2}|decstp|n?disi|div(p|rp?)?|n?eni|free(p|\\s*ST)?|iadd|icomp?|idivr?|ildl?|imul|incstp|n?init|ist((pl?|l)|tp)?|isubr?|ld[1slt]?|ldcw|ldenv[dw]?|ldl2[et]|ldl[gn]2|ldpi|ldz|mulp?|nop|n?stenv[wd]?|n?stsw|pa?tan|prem1?|rndint|rstor[dw]?|n?savew?|scale|sqrt|st(p?[slt])|n?stcw|sub(p|rp?)?|tst|wait|xam|xch|xtract|yl2x(p1)?|setpm|cos|saved|sin(cos)?|cmovn?b?e?|cmovn?u|u?comip?|xrstor|xsave))\\b",
           "comment" : "cpuid | grep -i x87"
        },
        {  "name": "entity.name.function.aes_functions",
           "match": "\\b(?i:aes(en|de)c(last)?|aeskeygenassist|aesimc)\\b",
           "comment" : "cpuid | grep -i aes"
        },
        {  "name": "entity.name.function.bmi1",
           "match": "\\b(?i:andn[lq]?|bextr[lq]?|blsi[lq]?|blsmsk[lq]?|blsr[dlq]?|tzcnt[wlq]?)\\b",
           "comment" : "cpuid | grep -i 'bmi i'"
        },
        {  "name": "entity.name.function.bmi2",
           "match": "\\b(?i:mulx[lq]?|pdep[lq]?|pext[lq]?|rorx[lq]?|s(h[lr]|ar)x)\\b",
           "comment" : "cpuid | grep -i 'bmi2'"
        },
        {
            "name": "entity.name.function.clmul",
            "match": "\\b(?i:pclmulqdq)\\b",
            "comment" : "cpuid | grep -i 'clmul'"
        },
        {  "name": "entity.name.function.prefetchw",
           "match": "\\b(?i:prefetchw)\\b",
           "comment": "cpuid | grep -i 'prefetchw'"
        },
        {  "name": "entity.name.function.fsgsbase",
           "match": "\\b(?i:(rd|wr)[fg]sbase)\\b",
           "comment": "cpuid | grep -i 'fsgs'"
        },
        {  "name": "entity.name.function.rdrand",
           "match": "\\b(?i:rdrand)\\b",
           "comment": "cpuid | grep -i 'rdrand'"
        },
        {  "name": "entity.name.function.AVXx",
           "match": "\\b(?i:vp?broadcast(s[sd]|f128)?|v(extract|insert|perm2)[if]128|vgather[dq]p[ds]|vp?maskmov|vpblendd|vperm([dq]|(il)?p[sd])|vpgather[dq]{1,2}|vpsllv[dq]|vpsr(avd|lv[qd])|vtestp[ds]|vzero(all|upper))\\b",
           "comment": "cpuid | grep -i 'avx'"
        },
        {  "name": "entity.name.function.F16c",
           "match": "\\b(?i:vcvt(ph2ps|ps2ph))\\b",
           "comment": "cpuid | grep -i 'f16c'"
        },
        {  "name": "entity.name.function.FMA",
           "match": "\\b(?i:vfn?m((add(sub)?|sub(add)?)((132|213|231)[ps][ds])))\\b",
           "comment": "cpuid | grep -i 'fma'"
        },
        {  "name": "entity.name.function.RTM",
           "match": "\\b(?i:x(abort|begin|end|test))\\b",
           "comment": "cpuid | grep -i 'rtm'"
        },
        {  "name": "entity.name.function.HLE",
           "match": "\\b(?i:x(acquire|release|test))\\b",
           "comment": "cpuid | grep -i 'HLE'"
        },
        {  "name": "entity.name.function.xsave",
           "match": "\\b(?i:xsaveopt(64)?)\\b",
           "comment":"cpuid | grep -i 'xsaveopt'"
        },
        {  "name": "support.constant.preprocessor",
           "match": "(?<!\\w)(#(#|(un)?assert|define|elif|else|endif|error|ident|(ifn?|un)?def|if|import|include(_next)?|line|pragma|sccs|warning))|__(FILE|LINE|DATE|TIME(STAMP)?|STDC_(VERSION|HOSTED)?|GNUC|GNUC_MINOR|GNUC_PATCHLEVEL|VERSION|STRICT_ANSI|BASE_FILE|INCLUDE_LEVEL|OPTIMIZE|OPTIMIZE_SIZE|NO_INLINE|CHAR_UNSIGNED|CHAR_BIT|INT_SHORT|SCHAR_MAX|SHRT_MAX|INT_MAX|LONG_MAX|LONG_LONG_MAX|REGISTER_PREFIX|USER_LABEL_PREFIX)__\\b"
        },
        {  "name": "invalid.warnings",
           "match": "(?<!\\w)(#\\s+(#|(un)?assert|define|elif|else|endif|error|ident|(ifn?|un)?def|if|import|include(_next)?|line|pragma|sccs|warning)\\b)"
        },
        {
            "name": "comment.assembly", 
            "match": "#.*$"
        }, 
        {
            "begin": "/\\*", 
            "end": "\\*/", 
            "name": "comment.assembly"
        }, 
        {
            "name": "constant.numeric.decimal", 
            "match": "(?<!\\w)[-~]?[1-9][0-9]*\\b",
            "comment":  "By the way, the ~ is a bitwise not. I decided to put the two prefix operators together."
        }, 
        {
            "name": "constant.other.decimal", 
            "match": "(?<!\\w)[$][-~]?[1-9][0-9]*\\b"
        }, 
        {
            "name": "constant.numeric.hex",
            "match": "(?<!\\w)[-~]?(?i)(0x)?[A-F0-9]+\\b"
        }, 
        {
            "name": "constant.other.hex", 
            "match": "(?<!\\w)[$](?i)(0x)[A-F0-9]+\\b"
        }, 
        {
            "name": "constant.numeric.binary", 
            "match": "(?<!\\w)[-~]?(0[Bb])[01]+\\b"
        }, 
        {
            "name": "constant.other.binary", 
            "match": "(?<!\\w)[$][-~]?(0[Bb])[01]+\\b"
        }, 
        {
            "name": "constant.numeric.octal", 
            "match": "(?<!\\w)[-~]?0[0-7]*\\b"
        }, 
        {
            "name": "constant.other.octal", 
            "match": "(?<!\\w)[$][-~]?0[0-7]*\\b"
        }, 
        {  "name": "constant.numeric.float",
           "match": "(?<!\\w)(?i)0[DFT][+-]?([0-9]*\\.?[0-9]*)(e[+-]?[0-9]+)?",
           "comment": "H8/300, Renesas/SuperH SH, and AMD 29K: use prefix 0[DFPRSX]. ARC: 0[DFRS]. Intel 960: 0[DFT]. HPPA: 0[E] (Captial E only. Others don't matter.)"
        },
        {  "name": "constant.other.float",
           "match": "(?<!\\w)[$](?i)0[DFT][+-]?([0-9]*\\.?[0-9]*)(e[+-]?[0-9]+)?",
           "comment": "See above for details."
        },
        {  "name": "constant.character",
           "match": "(?<!\\w)[$]?(?i)'([!-\\[\\]-~]|\\\\([\\\\bfnrt]|x[0-9a-f]{1,2}|[0-9]{3}))"
        },
        {
            "name": "string.quoted",
            "match": "(\".*?\"|<.*?>)"
        },
        {
            "name": "variable.parameter.registers", 
            "match": "%(?i:[er]?[a-d]x|[a-d][lh]|[re]?s[ip]|s[ip]l|[re]?di|dil|[re]?bp|bpl|[c-gs]s|[re]?ip|e?flags|db([0236-9]|1[0-5]?)|tr[67]?|st(\\([01-7]\\))?|esp[0-2]|[xy]?mm([02-9]|1[0-5]?)|zmm([4-9]|[12][0-9]?|3[10]?)|xmcrt|[gli]dtr|[cd]r([02-9]|1[0-5]?)|msr|r([89]|1[0-5])[dwb]?|[cst]w|fp_([id]p|[cd]s|opc)|mxcsr|msw)\\b",
            "comment": "Registers case insensitive. Not sure about some of these (Like the last few). I found some on Wikipedia."
            // Why were these here? These were eflags bits...
            // [roditszapc]f|vip|vif|ac|vm|nt|iopl|id| 
        },
        { "name": "keyword.label.assembly",
          "match": "((\\s+|^)([A-Za-z$_.0-9]|C-[BA])+[:])",
          "comment": "Assembly label/symbols."
        },
        {  "name": "invalid.instructions",
           "match": "\\b(?i:movz(lq)?)\\b"
        },
        {  "name": "invalid.directives",
           "match": "(?<!\\w)\\.(?i:abort|line|ln|loc_mark_blocks|intel_syntax(\\s*(no)?prefix)?|att_syntax\\s*noprefix)\\b",
           "comment" : "You probably won't be using these anyway... but still. Good to have reminders, I guess?"
        },
        { "name": "support.constant.subsections",
          "match": "(?<!\\w)(?i:\\.(app-file|asci[iz]|b?align|bundle_(align_mode|(un)?lock)|byte|cfi_(sections|startproc|endproc|personality|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr)|code(16(gcc)?|32|64)|data|def|desc|dim|double|eject|else(if)?|end([ei]f|func|[mr])?|exitm|equ(iv)?|eqv|err(or)?|extern|fail|file|fill|float|globa?l|hidden|hword|ident|if(def|eqs?|[gl][et]|n?[bc]|n(ot)?def|nes?)?|incbin|include|int(ernal)?|irpc?|l?comm|lflags|linkonce|loc(_mark_labels|al)?|mri|(no)?list|long|macro|(no)?altmacro|octa|org|p2align[wl]?|popsection|previous|print|protected|p?size|purgem|quad|rept|sbttl|scl|set|short|single|skip|sleb128|space|stab[dns]|string(8|16|32|64)?|struct|subsection|symver|tag|text|title|uleb128|val|version|vtable_(entry|inherit)|warning|weak(ref)?|word|att_syntax(\\s*prefix)?)\\b)",
          "comment": "Pseudo-ops, directives, or subsection markers."
        },
        {  "name": "support.constant.subsections.type",
           "match": "((?i:\\.type)(.*?)([@#%](common|(gnu_indirect_)?function|(gnu_unique_|tls_)?object|notype)|STT_(COMMON|(GNU_I)?FUNC|NOTYPE|OBJECT|TLS)))",
           "captures": {
               "3": { "name": "variable.parameter.symbol" }
           },
           "comment": "Specific to the .type pseudo-op."
        },
        {  "name": "support.constant.subsections.section",
           "match": "((?i:\\.(push)?section)(.*?)(@((no|prog)bits|note|((pre)?init|fini)_array)))",
           "captures": {
               "4": { "name": "variable.parameter.symbol" }
           },
           "comment": "Specific to the .section"
        },
        {  "name": "support.constant.arch_specification",
           "match": "(?<!\\w)\\.(?i:(arch) (i8086|i[1-6]86|pentium(pro|iii?|4)?|prescott|nocona|core(2|i7)?|[lk]1om|k6(_2)?|athlon|k8|amdfam10|bdver[1-3]|btver[12]|generic(32|64)|.(mmx|sse([2-5]|4(.[12]|a))?|ssse3|avx[2]?|[vs]mx|ept|clflush|movbe|xsave(opt)?|aes|pclmul|fma|fsgsbase|rdrnd|f16c|bmi2|lzcnt|invpcid|vmfunc|hle|rtm|adx|rdseed|prfchw|smap|mpx|sha|3dnowa?|syscall|rdtscp|svme|abm|lwp|fma4|xop|cx16|padlock|avx512(p?f|cd|er)?))),\\s*(no)?jumps",
           "captures": {
               "2": { "name": "keyword.arch" }
           }
        },
        {  "name": "support.constant.alternatives",
           "match": "\\b([A-Za-z$_.0-9]+)\\s*(==?)\\s*",
           "captures": {
               "0": { "name": "variable.parameter.symbol" },
               "1": { "name": "keyword.operator.assignment"}
           },
           "comment": "Alternative ways of writing the .set and .eqv directives."
        }
    ], 
    "uuid": "245288b9-8026-4e7f-8b27-d4ff081a25bf", 
    "fileTypes": [
        "s", 
        "S",
        "sx"
    ], 
    "name": "Assembly x86(_64) AT&T", 
    "scopeName": "source.s"
}
