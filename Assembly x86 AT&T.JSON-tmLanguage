{
    "patterns": [
        {
            "name": "entity.name.function.instructions", 
            "match": "\\b(?i:aa[adms]\\b|adc|add|addpd|addps|addsd|addss|addsubpd|aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|and|andpd|andps|andnpd|andnps|arpl|blendpd|blendps|blendvpd|blendvps|bound(w|l|\\b)\\b|bsf|bsr|bswap(l|q)?\\b|bt|btc|btr|bts|call\\b|cbtw\\b|cbw|cdq|scdqe|clc\\b|cld\\b|clflush|cli\\b|cltd(w|d|q)?\\b|clts|cmc\\b|cmova(w|l|q)?\\b|cmov|cmp|cmppd|cmpps|cmps|cmpsd|cmpss|cmpxchg|cmpxchg8b|cmpxchg16b|comisd|comiss|cpuid|crc32|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2pi|cvtpd2ps|cvti2pd|cvtpi2ps|cvtps2dq|cvtps2pd|cvtps2pi|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtsi2ss|cvtss2sd|cvtss2si|cvttpd2dq|cvttpd2pi|cvttps2dq|cvttps2pi|cvttsd2si|cvttss2si|cwd|cqo|cwde|daa\\b|das\\b|dec|div|divpd|divps|divsd|divss|dppd|dpps|emms|enter\\b|extractps|esc|hlt\\b|idiv|imul|in|inc|ins|int\\b|into\\b|invd|invlpg|iret\\b|iretd|ja\\b|jae\\b|jb\\b|jbe\\b|jc\\b|jcxz\\b|je\\b|jecxz\\b|jg\\b|jge\\b|jl\\b|jle\\b|jmp\\b|jna\\b|jnae\\b|jnb\\b|jnbe\\b|jnc\\b|jne\\b|jng\\b|jnge\\b|jnl\\b|jnle\\b|jno\\b|jnp\\b|jns\\b|jnz\\b|jo\\b|jp\\b|jpe\\b|jpo\\b|js\\b|jz\\b|lahf\\b|lar|lcall\\b|lds|lea|leave\\b|les|lfs|[ls][gil]dt|lgs|ljmp\\b|lmsw|lock\\b|lods(b|l|q)?\\b|loop\\b|loope\\b|loopz\\b|loopnz\\b|loopne\\b|lret\\b|lsl|lss|ltr|mov|movs(b|l|w)|movsx|movzx|mul|neg|nop\\b|not|or|out|outs|pop|popa|popad|popf[lq]?\\b|popfd|push|pusha|pushad|pushf[lq]?\\b|pushfd|rcl|rcr|rdtsc\\b|rep|repe|repz|repne|repnz|ret|retf|rol|ror|sahf\\b|sal|sar|sbb|scas|setae?\\b|setnbe?\\b|setnae?\\b|setbe?\\b|sete\\b|setz\\b|setne\\b|setnz\\b|setl\\b|setnge\\b|setge\\b|setng\\b|setle\\b|setg\\b|setnl\\b|setnle\\b|sets\\b|setns\\b|setc\\b|setnc\\b|seto\\b|setno\\b|setp\\b|setpe|setnp\\b|setpo\\b|shld?|shrd?|smsw|stc\\b|std\\b|sti\\b|stos|str|sub|syscall\\b|sysenter\\b|sysexit\\b|test|verr|verw|wait\\b|fwait|wbinvd|xchg|xlat|xlatb|xor)(?i:b|w|l|q)?\\b"
        }, 
        {  "name": "support.constant.preprocessor",
           "match": "(?<!\\w)(#(#|include|define|undef|if|ifn?def|else|elsif|endif|pragma|warning))|__(FILE|LINE|DATE|TIME(STAMP)?|STDC_(VERSION|HOSTED)?|GNUC|GNUC_MINOR|GNUC_PATCHLEVEL|VERSION|STRICT_ANSI|BASE_FILE|INCLUDE_LEVEL|OPTIMIZE|OPTIMIZE_SIZE|NO_INLINE|CHAR_UNSIGNED|CHAR_BIT|INT_SHORT|SCHAR_MAX|SHRT_MAX|INT_MAX|LONG_MAX|LONG_LONG_MAX|REGISTER_PREFIX|USER_LABEL_PREFIX)__\\b"
        },
        {
            "name": "comment.assembly", 
            "match": "#.*$"
        }, 
        {
            "begin": "/\\*", 
            "end": "\\*/", 
            "name": "comment.assembly"
        }, 
        {
            "name": "constant.numeric.decimal", 
            "match": "(?<!\\w)[-~]?[1-9][0-9]*\\b",
            "comment":  "By the way, the ~ is a bitwise not. I decided to put the two prefix operators together."
        }, 
        {
            "name": "constant.other.decimal", 
            "match": "(?<!\\w)[$][-~]?[1-9][0-9]*\\b"
        }, 
        {
            "name": "constant.numeric.hex",
            "match": "(?<!\\w)[-~]?(?i)(0x)[A-F0-9]+\\b"
        }, 
        {
            "name": "constant.other.hex", 
            "match": "(?<!\\w)[$](?i)(0x)[A-F0-9]+\\b"
        }, 
        {
            "name": "constant.numeric.binary", 
            "match": "(?<!\\w)[-~]?(0[Bb])[01]+\\b"
        }, 
        {
            "name": "constant.other.binary", 
            "match": "(?<!\\w)[$][-~]?(0[Bb])[01]+\\b"
        }, 
        {
            "name": "constant.numeric.octal", 
            "match": "(?<!\\w)[-~]?0[0-7]*\\b"
        }, 
        {
            "name": "constant.other.octal", 
            "match": "(?<!\\w)[$][-~]?0[0-7]*\\b"
        }, 
        {  "name": "constant.numeric.float",
           "match": "(?<!\\w)(?i)0[DFT][+-]?([0-9]*\\.?[0-9]*)(e[+-]?[0-9]+)?",
           "comment": "H8/300, Renesas/SuperH SH, and AMD 29K: use prefix 0[DFPRSX]. ARC: 0[DFRS]. Intel 960: 0[DFT]. HPPA: 0[E] (Captial E only. Others don't matter.)"
        },
        {  "name": "constant.other.float",
           "match": "(?<!\\w)[$](?i)0[DFT][+-]?([0-9]*\\.?[0-9]*)(e[+-]?[0-9]+)?",
           "comment": "See above for details."
        },
        {  "name": "constant.character",
           "match": "(?i)'(\\d|\\w|\\\\([\\\\bfnrt\"]|x[0-9a-f]+|[0-9]{3}))"
        },
        {
            "name": "string.quoted",
            "match": "[\"].*[\"]"
        },
        {
            "name": "variable.parameter.registers", 
            "match": "%(?i:[er]?[a-d]x|[a-d][lh]|[re]?s[ip]|s[ip]l|[re]?di|dil|[re]?bp|bpl|[c-gs]s|[re]?ip|e?flags|db([0236-9]|1[0-5]?)|tr[67]?|st(\\([01-7]\\))?|esp[0-2]|[xy]?mm([02-9]|1[0-5]?)|zmm([4-9]|[12][0-9]?|3[10]?)|xmcrt|[gli]dtr|[cd]r([02-9]|1[0-5]?)|msr|r([89]|1[0-5])[dwb]?|[cst]w|fp_([id]p|[cd]s|opc)|mxcsr|msw)\\b",
            "comment": "Registers case insensitive. Not sure about some of these (Like the last few). I found some on Wikipedia."
            // Why were these here? These were eflags bits...
            // [roditszapc]f|vip|vif|ac|vm|nt|iopl|id| 
        },
        { "name": "keyword.label.assembly",
          "match": "((?<!\\w)([A-Za-z$_.0-9]|C-[BA])+[:])",
          "comment": "Assembly label/symbols."
        },
        { "name": "support.constant.subsection.assembly",
          "match": "(?<!\\w)(\\.(app-file|asci[iz]|b?align|bundle_(align_mode|(un)?lock)|byte|cfi_(sections|startproc|endproc|personality|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr|(start|end)proc)|data|def|desc|dim|double|eject|else(if)?|end([ei]f|func|[mr])?|exitm|equ(iv)?|eqv|err(or)?|extern|fail|file|fill|float|globa?l|hidden|hword|ident|if|incbin|include|int(ernal)?|irpc?|l?comm|lflags|linkonce|loc(_mark_blocks)?|mri|(no)?list|long|macro|(no)?altmacro|octa|org|p2align[wl]?|popsection|previous|print|protected|p?size|purgem|pushsection|quad|rept|sbttl|scl|section|set|short|single|skip|sleb128|space|stab[dns]|string(8|16|32|64)?|struct|subsection|symver|tag|text|title|type|uleb128|val|version|vtable_(entry|inherit)|warning|weak(ref)?|word)\\b)",
          "comment": "Pseudo-ops and subsection markers"
        },
        {  "name": "invalid.directives",
           "match": "(?<!\\w)\\.(abort|ABORT|line|ln)\\b"
        }
    ], 
    "uuid": "245288b9-8026-4e7f-8b27-d4ff081a25bf", 
    "fileTypes": [
        "s", 
        "S"
    ], 
    "name": "Assembly x86 AT&T", 
    "scopeName": "source.s"
}
