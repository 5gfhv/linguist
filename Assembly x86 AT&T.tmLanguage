<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>s</string>
		<string>S</string>
	</array>
	<key>name</key>
	<string>Assembly x86(_64) AT&amp;T</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\b(?i:aa[adms]\b|adc|add|addpd|addps|addsd|addss|addsubpd|aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|and|andpd|andps|andnpd|andnps|arpl|blendpd|blendps|blendvpd|blendvps|bound(w|l|\b)\b|bsf|bsr|bswap(l|q)?\b|bt|btc|btr|bts|call\b|cbtw\b|cbw|cdq|scdqe|clc\b|cld\b|clflush|cli\b|cltd(w|d|q)?\b|clts|cmc\b|cmova(w|l|q)?\b|cmov|cmp|cmppd|cmpps|cmps|cmpsd|cmpss|cmpxchg|cmpxchg8b|cmpxchg16b|comisd|comiss|cpuid|crc32|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2pi|cvtpd2ps|cvti2pd|cvtpi2ps|cvtps2dq|cvtps2pd|cvtps2pi|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtsi2ss|cvtss2sd|cvtss2si|cvttpd2dq|cvttpd2pi|cvttps2dq|cvttps2pi|cvttsd2si|cvttss2si|cwd|cqo|cwde|daa\b|das\b|dec|div|divpd|divps|divsd|divss|dppd|dpps|enter\b|extractps|esc|hlt\b|idiv|imul|in|inc|ins|int\b|into\b|invd|invlpg|iret\b|iretd|ja\b|jae\b|jb\b|jbe\b|jc\b|jcxz\b|je\b|jecxz\b|jg\b|jge\b|jl\b|jle\b|jmp\b|jna\b|jnae\b|jnb\b|jnbe\b|jnc\b|jne\b|jng\b|jnge\b|jnl\b|jnle\b|jno\b|jnp\b|jns\b|jnz\b|jo\b|jp\b|jpe\b|jpo\b|js\b|jz\b|lahf\b|lar|lcall\b|lds|lea|leave\b|les|lfs|[ls][gil]dt|lgs|ljmp\b|lmsw|lock\b|lods(b|l|q)?\b|loop\b|loope\b|loopz\b|loopnz\b|loopne\b|lret\b|lsl|lss|ltr|mov|movs(b|l|w)|movsx|movzx|mul|neg|nop\b|not|or|out|outs|pop|popa|popad|popf[lq]?\b|popfd|push|pushal?\b|pushad|pushf[lq]?\b|pushfd|rcl|rcr|rdtsc\b|rep|repe|repz|repne|repnz|ret|retf|rol|ror|sahf\b|sal|sar|sbb|scas|setae?\b|setnbe?\b|setnae?\b|setbe?\b|sete\b|setz\b|setne\b|setnz\b|setl\b|setnge\b|setge\b|setng\b|setle\b|setg\b|setnl\b|setnle\b|sets\b|setns\b|setc\b|setnc\b|seto\b|setno\b|setp\b|setpe|setnp\b|setpo\b|shld?|shrd?|smsw|stc\b|std\b|sti\b|stos|str|sub|syscall\b|sysenter\b|sysexit\b|test|verr|verw|wait\b|fwait|wbinvd|xchg|xlat|xlatb|xor)(?i:[bwlq])?\b</string>
			<key>name</key>
			<string>entity.name.function.instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Didn't know about these before...</string>
			<key>match</key>
			<string>\b(?i:emms|mov[dq]|pack(ssdw|[us]swb)|padd([bdw]|u?s[bw])|pandn?|pcmp(eq|gt)[bdw]|pmaddwd|pmul[hl]w|psll[dqw]|psr(a[dw]|l[dqw])|psub([bdw]|u?s[bw])|punpck[hl](bw|dq|wd)|px?or)\b</string>
			<key>name</key>
			<string>entity.name.function.mmx_instructions</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)(#(#|include|define|undef|if|ifn?def|else|elsif|endif|pragma|warning))|__(FILE|LINE|DATE|TIME(STAMP)?|STDC_(VERSION|HOSTED)?|GNUC|GNUC_MINOR|GNUC_PATCHLEVEL|VERSION|STRICT_ANSI|BASE_FILE|INCLUDE_LEVEL|OPTIMIZE|OPTIMIZE_SIZE|NO_INLINE|CHAR_UNSIGNED|CHAR_BIT|INT_SHORT|SCHAR_MAX|SHRT_MAX|INT_MAX|LONG_MAX|LONG_LONG_MAX|REGISTER_PREFIX|USER_LABEL_PREFIX)__\b</string>
			<key>name</key>
			<string>support.constant.preprocessor</string>
		</dict>
		<dict>
			<key>match</key>
			<string>#.*$</string>
			<key>name</key>
			<string>comment.assembly</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.assembly</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>By the way, the ~ is a bitwise not. I decided to put the two prefix operators together.</string>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?[1-9][0-9]*\b</string>
			<key>name</key>
			<string>constant.numeric.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?[1-9][0-9]*\b</string>
			<key>name</key>
			<string>constant.other.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?(?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$](?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.other.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.numeric.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.other.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.numeric.octal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.other.octal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>H8/300, Renesas/SuperH SH, and AMD 29K: use prefix 0[DFPRSX]. ARC: 0[DFRS]. Intel 960: 0[DFT]. HPPA: 0[E] (Captial E only. Others don't matter.)</string>
			<key>match</key>
			<string>(?&lt;!\w)(?i)0[DFT][+-]?([0-9]*\.?[0-9]*)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.numeric.float</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>See above for details.</string>
			<key>match</key>
			<string>(?&lt;!\w)[$](?i)0[DFT][+-]?([0-9]*\.?[0-9]*)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.other.float</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$]?(?i)'([!-\[\]-~]|\\([\\bfnrt]|x[0-9a-f]{1,2}|[0-9]{3}))</string>
			<key>name</key>
			<string>constant.character</string>
		</dict>
		<dict>
			<key>match</key>
			<string>["].*["]</string>
			<key>name</key>
			<string>string.quoted</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Registers case insensitive. Not sure about some of these (Like the last few). I found some on Wikipedia.</string>
			<key>match</key>
			<string>%(?i:[er]?[a-d]x|[a-d][lh]|[re]?s[ip]|s[ip]l|[re]?di|dil|[re]?bp|bpl|[c-gs]s|[re]?ip|e?flags|db([0236-9]|1[0-5]?)|tr[67]?|st(\([01-7]\))?|esp[0-2]|[xy]?mm([02-9]|1[0-5]?)|zmm([4-9]|[12][0-9]?|3[10]?)|xmcrt|[gli]dtr|[cd]r([02-9]|1[0-5]?)|msr|r([89]|1[0-5])[dwb]?|[cst]w|fp_([id]p|[cd]s|opc)|mxcsr|msw)\b</string>
			<key>name</key>
			<string>variable.parameter.registers</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Assembly label/symbols.</string>
			<key>match</key>
			<string>((?&lt;!\w)([A-Za-z$_.0-9]|C-[BA])+[:])</string>
			<key>name</key>
			<string>keyword.label.assembly</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pseudo-ops and subsection markers</string>
			<key>match</key>
			<string>(?&lt;!\w)(\.(app-file|asci[iz]|b?align|bundle_(align_mode|(un)?lock)|byte|cfi_(sections|startproc|endproc|personality|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr|(start|end)proc)|data|def|desc|dim|double|eject|else(if)?|end([ei]f|func|[mr])?|exitm|equ(iv)?|eqv|err(or)?|extern|fail|file|fill|float|globa?l|hidden|hword|ident|if|incbin|include|int(ernal)?|irpc?|l?comm|lflags|linkonce|loc(_mark_blocks)?|mri|(no)?list|long|macro|(no)?altmacro|octa|org|p2align[wl]?|popsection|previous|print|protected|p?size|purgem|pushsection|quad|rept|sbttl|scl|section|set|short|single|skip|sleb128|space|stab[dns]|string(8|16|32|64)?|struct|subsection|symver|tag|text|title|type|uleb128|val|version|vtable_(entry|inherit)|warning|weak(ref)?|word)\b)</string>
			<key>name</key>
			<string>support.constant.subsection.assembly</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)\.(abort|ABORT|line|ln)\b</string>
			<key>name</key>
			<string>invalid.directives</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.s</string>
	<key>uuid</key>
	<string>245288b9-8026-4e7f-8b27-d4ff081a25bf</string>
</dict>
</plist>
