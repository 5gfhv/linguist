<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>s</string>
		<string>S</string>
	</array>
	<key>name</key>
	<string>Assembly x86(_64) AT&amp;T</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>I may organize these later based on processor additions.</string>
			<key>match</key>
			<string>\b(?i:aa[adms]\b|adc|x?add|addr(16|32)\b|and|arpl\b|bound[wl]?\b|bs[fr]\b|bswap[lq]?\b|bt[crs]?\b|call\b|cbt?w\b|cdqe\b|cdo\b|clc\b|cld\b|clflush|cli\b|cltd[dqw]?\b|clts\b|cmc\b|cmov(n?[abgl]e?|n?[ceosz]|np|p[eo]?)[lqw]?\b|cmp|cmps[dq]?\b|cmpxchg|cmpxchg(8|16)b\b|cpuid\b|c[lw]td|cwde?|cqo\b|daa\b|das\b|dec|div|enter\b|esc|hlt\b|idiv|imul|in|inc|insd?|int3?\b|into\b|invd\b|invlpg\b|iret[dfq]?\b|j(n?[abgl]e?|n?[ceosz]|np|p[eo]?)\b|jmp\b|j[er]?cxz\b|[ls]ahf\b|lar\b|lcall\b|l[de]s\b|lea|leave\b|l[defgs]s\b|[ls][gil]dt\b|ljmp\b|lmsw\b|loadall|lock\b|lods[bdlq]?\b|loopn?[ez][dw]\b|lret\b|lsl\b|ltr\b|mov([sz]?(b[lw]?|w[lq]|[bl]?q))?\b|movsxd|mov[sz]x|mul|neg|nop\b|not|x?or|out|outsd?\b|pop|popa|pop[af]d\b|popf[lq]?\b|push|pushal?\b|push[af]d\b|pushf[lq]?\b|rc[lr]|(rd|wr)msr\b|rdtscp?\b|repn?[ez]|retf?|ro[lr]|rsm\b|sa[lr]|sbb|scas[bdqw]?\b|set(n?[abgl]e?|n?[ceosz]|np|p[eo]?)\b|sh[lr]d?|smsw\b|stc\b|std\b|sti\b|stos[dq]?\b|str\b|sub|swapgs\b|syscall\b|sysret\b|sysenter\b|sysexit\b|test|ud2\b|ver[rw]|wait\b|fwait|wbinvd\b|xchg|xlatb?\b)(?i:[bwlq])?\b</string>
			<key>name</key>
			<string>entity.name.function.instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Didn't know about these before...</string>
			<key>match</key>
			<string>\b(?i:emms|mov[dq]|pack(ssdw|[us]swb)|padd([bdw]|u?s[bw])|pandn?|pcmp(eq|gt)[bdw]|pmaddwd|pmul[hl]w|psll[dqw]|psr(a[dw]|l[dqw])|psub([bdw]|u?s[bw])|punpck[hl](bw|dq|wd)|px?or|rdpmc)\b</string>
			<key>name</key>
			<string>entity.name.function.mmx_instructions</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:maskmovq|movntps|movntq|prefetch[012]|prefetchnta|sfence)\b</string>
			<key>name</key>
			<string>entity.name.function.sse</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:add[sp]s|cmp[ps]s|u?comiss|cvt(p(i2ps|s2pi)|s(i2ss|s2si)|t(ps2pi|ss2si))|div[ps]s|ldmxcsr|(max|min)[ps]s|mov(a|hl?|lh?|msk|nt)ps|mov(s|up)s|mul[ps]s|rcp[ps]s|r?sqrt[ps]s|shufps|stmxcsr|sub[ps]s|unpck[hl]ps|andn?ps|x?orps|pavg[bw]|pextrw|pminsrw|p(max|min)(sw|ub)|pmovmskb|pmulhuw|psadbw|pshufw)\b</string>
			<key>name</key>
			<string>entity.name.function.sse_simd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:clflush|[lm]fence|maskmovdqu|movnt(dq|i|pd)|pause)\b</string>
			<key>name</key>
			<string>entity.name.function.sse2</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:add[ps]d|andn?pd|cmp[ps]d|u?comisd|cvtdq2p[ds]|cvtt?pd2(dq|pi)|cvtpd2ps|cvtp[is]2pd|cvtt?ps2dq|cvtt?sd2s[is]|cvts[is]2sd|div[ps]d|(max|min)[ps]d|mov[ahlu]pd|movmskpd|mul[ps]d|x?orpd|shufpd|sqrt[ps]d|sub[ps]d|unpck[hl]pd|unpcklpd|movdq(2q|[au])|movq2dq|paddq|psubq|pmuludq|pshuf([hl]w|d)|ps[lr]ldq|punpck[hl]qdq)\b</string>
			<key>name</key>
			<string>entity.name.function.sse2_simd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(lddqu|monitor|mwait)\b</string>
			<key>name</key>
			<string>entity.name.function.sse3</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:addsubp[ds]|haddp[ds]|hsubp[ds]|mov(d|s[hl])dup|psign[bdw]|pshufb|pmulhrsw|pmaddubsw|phsub(s?w|d)|phadd(s?w|d)|palignr|pabs[bdw])\b</string>
			<key>name</key>
			<string>entity.name.function.xsse3_simd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:mpsadbw|phminposuw|pmul(ld|dq)|dpp[ds]|blendv?p[ds]|pblendvb|pblendw|p(max|min)(s[bd]|u[wd])|roundp[ds]|rounds[ds]|insertps|pinsr[bdq]|extractps|pextr[bdq]|pmov[sz]xb[dwq]|pmov[sz]xw[dq]|pmov[sz]xdq|ptest|pcmpeqq|packusdw|movntdqa|lzcnt|popcnt|extrq|insertq|movnts[ds]|crc32|pcmp[ei]str[im]|pcmpgtq)\b</string>
			<key>name</key>
			<string>entity.name.function.sse4_simd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:f(2xm1|abs|addp?|bld|b?stp|chs|n?clex|u?comp{0,2}|decstp|n?disi|div(p|rp?)?|n?eni|free(p| ST)?|iadd|icomp?|idivr?|ild|imul|incstp|n?init|ist(p|tp)?|isubr?|ld1?|ldcw|ldenv[dw]?|ldl2[et]|ldl[gn]2|ldpi|ldz|mulp?|nop|n?stenv[wd]?|n?stsw|pa?tan|prem1?|rndint|rstor[dw]?|n?savew?|scale|sqrt|st|n?stcw|sub(p|rp?)?|tst|wait|xam|xch|xtract|yl2x(p1)?|setpm|cos|saved|sin(cos)?|cmovn?b?e?|cmovn?u|u?comip?|xrstor|xsave))\b</string>
			<key>name</key>
			<string>entity.name.function.fpu_x87</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)(#(#|include|define|undef|if|ifn?def|else|elsif|endif|pragma|warning))|__(FILE|LINE|DATE|TIME(STAMP)?|STDC_(VERSION|HOSTED)?|GNUC|GNUC_MINOR|GNUC_PATCHLEVEL|VERSION|STRICT_ANSI|BASE_FILE|INCLUDE_LEVEL|OPTIMIZE|OPTIMIZE_SIZE|NO_INLINE|CHAR_UNSIGNED|CHAR_BIT|INT_SHORT|SCHAR_MAX|SHRT_MAX|INT_MAX|LONG_MAX|LONG_LONG_MAX|REGISTER_PREFIX|USER_LABEL_PREFIX)__\b</string>
			<key>name</key>
			<string>support.constant.preprocessor</string>
		</dict>
		<dict>
			<key>match</key>
			<string>#.*$</string>
			<key>name</key>
			<string>comment.assembly</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.assembly</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>By the way, the ~ is a bitwise not. I decided to put the two prefix operators together.</string>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?[1-9][0-9]*\b</string>
			<key>name</key>
			<string>constant.numeric.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?[1-9][0-9]*\b</string>
			<key>name</key>
			<string>constant.other.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?(?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$](?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.other.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.numeric.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.other.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.numeric.octal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.other.octal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>H8/300, Renesas/SuperH SH, and AMD 29K: use prefix 0[DFPRSX]. ARC: 0[DFRS]. Intel 960: 0[DFT]. HPPA: 0[E] (Captial E only. Others don't matter.)</string>
			<key>match</key>
			<string>(?&lt;!\w)(?i)0[DFT][+-]?([0-9]*\.?[0-9]*)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.numeric.float</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>See above for details.</string>
			<key>match</key>
			<string>(?&lt;!\w)[$](?i)0[DFT][+-]?([0-9]*\.?[0-9]*)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.other.float</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$]?(?i)'([!-\[\]-~]|\\([\\bfnrt]|x[0-9a-f]{1,2}|[0-9]{3}))</string>
			<key>name</key>
			<string>constant.character</string>
		</dict>
		<dict>
			<key>match</key>
			<string>["&lt;].*?["&gt;]</string>
			<key>name</key>
			<string>string.quoted</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Registers case insensitive. Not sure about some of these (Like the last few). I found some on Wikipedia.</string>
			<key>match</key>
			<string>%(?i:[er]?[a-d]x|[a-d][lh]|[re]?s[ip]|s[ip]l|[re]?di|dil|[re]?bp|bpl|[c-gs]s|[re]?ip|e?flags|db([0236-9]|1[0-5]?)|tr[67]?|st(\([01-7]\))?|esp[0-2]|[xy]?mm([02-9]|1[0-5]?)|zmm([4-9]|[12][0-9]?|3[10]?)|xmcrt|[gli]dtr|[cd]r([02-9]|1[0-5]?)|msr|r([89]|1[0-5])[dwb]?|[cst]w|fp_([id]p|[cd]s|opc)|mxcsr|msw)\b</string>
			<key>name</key>
			<string>variable.parameter.registers</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Assembly label/symbols.</string>
			<key>match</key>
			<string>((?&lt;!\w)([A-Za-z$_.0-9]|C-[BA])+[:])</string>
			<key>name</key>
			<string>keyword.label.assembly</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>You probably won't be using these anyway... but still. Good to have reminders, I guess?</string>
			<key>match</key>
			<string>(?&lt;!\w)\.(abort|ABORT|line|ln|intel_syntax(\s*(no)?prefix)?|att_syntax\s*noprefix)\b</string>
			<key>name</key>
			<string>invalid.directives</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pseudo-ops, directives, or subsection markers</string>
			<key>match</key>
			<string>(?&lt;!\w)(\.(app-file|arch|asci[iz]|b?align|bundle_(align_mode|(un)?lock)|byte|cfi_(sections|startproc|endproc|personality|code(16(gcc)?|32)|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr|(start|end)proc)|data|def|desc|dim|double|eject|else(if)?|end([ei]f|func|[mr])?|exitm|equ(iv)?|eqv|err(or)?|extern|fail|file|fill|float|globa?l|hidden|hword|ident|if|incbin|include|int(ernal)?|irpc?|l?comm|lflags|linkonce|loc(_mark_blocks)?|mri|(no)?list|long|macro|(no)?altmacro|octa|org|p2align[wl]?|popsection|previous|print|protected|p?size|purgem|pushsection|quad|rept|sbttl|scl|section|set|short|single|skip|sleb128|space|stab[dns]|string(8|16|32|64)?|struct|subsection|symver|tag|text|title|type|uleb128|val|version|vtable_(entry|inherit)|warning|weak(ref)?|word|att_syntax(\s*prefix)?)\b)</string>
			<key>name</key>
			<string>support.constant.subsection.assembly</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.s</string>
	<key>uuid</key>
	<string>245288b9-8026-4e7f-8b27-d4ff081a25bf</string>
</dict>
</plist>
